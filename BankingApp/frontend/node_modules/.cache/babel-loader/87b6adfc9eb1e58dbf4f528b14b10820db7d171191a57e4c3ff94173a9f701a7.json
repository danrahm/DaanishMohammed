{"ast":null,"code":"var _jsxFileName = \"/Users/daanish/Documents/GitHub/BankingApp/frontend/src/components/login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport \"./login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n  // Used to store the user login information\n  const [form, setForm] = useState(\"\");\n\n  // Used to navigate to a new page\n  const navigate = useNavigate();\n\n  // Used to update the Json object from the form\n  function updateForm(jsonObj) {\n    return setForm(prevJsonObj => {\n      return {\n        ...prevJsonObj,\n        ...jsonObj\n      };\n    });\n  }\n\n  // After the user clicks the submit button\n  // Checks with the backend to make the user \n  // exists and verifies there login\n  async function onSubmit(e) {\n    let response;\n    e.preventDefault();\n\n    // Json object for the login information\n    const loginInfo = {\n      userName: form.userName,\n      password: form.password\n    };\n    // sends a request to the backend to login the user\n    response = await fetch(`http://localhost:4000/testUpdateUser`, {\n      // tempary to check logic works\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(loginInfo)\n    }).catch(error => {\n      // If the request has an issue\n      window.alert(error);\n      return;\n    });\n    // If the user was successfully logged in\n    if (response.status === 200) {\n      // Store the user information \n      //const user = await response.json();\n      //console.log(user._id);\n      // Calls the backend to create a session for the user\n      // await fetch(`http://localhost:4000/session_set/${user._id}`, // temp session set\n      // {\n      // method: \"GET\",\n      // credentials: \"include\"  \n      // }\n      // )\n      // once the request is done takes the user to account info page\n      navigate(\"/customer\");\n    } else {\n      // If the user was information was incorrect\n      window.alert(\"The username and/or password was not correct\");\n    }\n  }\n\n  // The HTML with the functionality to run the page\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"User Name: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"userName\",\n          value: form.userName,\n          onChange: e => updateForm({\n            userName: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"password\",\n          value: form.password,\n          onChange: e => updateForm({\n            password: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(Login, \"k1fRmKpxjotF1ccq/caxodPr9zU=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Login","_s","form","setForm","navigate","updateForm","jsonObj","prevJsonObj","onSubmit","e","response","preventDefault","loginInfo","userName","password","fetch","method","headers","body","JSON","stringify","catch","error","window","alert","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/daanish/Documents/GitHub/BankingApp/frontend/src/components/login.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport \"./login.css\"\n\nexport default function Login () {\n    // Used to store the user login information\n    const [form, setForm] = useState(\"\");\n\n    // Used to navigate to a new page\n    const navigate = useNavigate();\n\n    // Used to update the Json object from the form\n    function updateForm(jsonObj){\n        return setForm((prevJsonObj) => {\n            return {...prevJsonObj, ...jsonObj};\n        });\n    }\n\n    // After the user clicks the submit button\n    // Checks with the backend to make the user \n    // exists and verifies there login\n    async function onSubmit(e) {\n        let response;\n        e.preventDefault();\n\n        // Json object for the login information\n        const loginInfo = {\n            userName: form.userName,\n            password: form.password\n        };\n        // sends a request to the backend to login the user\n        response = await fetch(`http://localhost:4000/testUpdateUser`, { // tempary to check logic works\n            method: \"POST\",\n            headers: {\n                \"Content-Type\" : \"application/json\",\n            },\n            body: JSON.stringify(loginInfo),\n        })\n        .catch(error => {\n            // If the request has an issue\n            window.alert(error);\n            return;\n        });\n        // If the user was successfully logged in\n        if(response.status === 200){\n            // Store the user information \n            //const user = await response.json();\n            //console.log(user._id);\n            // Calls the backend to create a session for the user\n            // await fetch(`http://localhost:4000/session_set/${user._id}`, // temp session set\n                // {\n                    // method: \"GET\",\n                    // credentials: \"include\"  \n                // }\n            // )\n            // once the request is done takes the user to account info page\n            navigate(\"/customer\")\n        } else {\n            // If the user was information was incorrect\n            window.alert(\"The username and/or password was not correct\");\n        }\n       \n    }\n\n    // The HTML with the functionality to run the page\n    return (\n        <div className=\"login-container\">\n        <h3>Login</h3>\n        <form onSubmit={onSubmit}>\n            <div>\n                <label>User Name: </label>\n                <input\n                    type=\"text\"\n                    id=\"userName\"\n                    value={form.userName}\n                    onChange={(e) => updateForm({ userName: e.target.value})}\n                />\n            </div>\n            <div>\n                <label>Password: </label>\n                <input\n                    type=\"text\"\n                    id=\"password\"\n                    value={form.password}\n                    onChange={(e) => updateForm({ password: e.target.value})}\n                />\n            </div>\n            <br/>\n            <div>\n                <input\n                    type=\"submit\"\n                    value=\"Login\"\n                />\n            </div>\n        </form>\n    </div>\n    );\n        \n    \n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}