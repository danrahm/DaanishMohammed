{"ast":null,"code":"var _jsxFileName = \"/Users/daanish/Documents/GitHub/BankingApp/frontend/src/components/login.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport \"./login.css\";\n\n//Define Login \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n  // Manage Username and Password\n  const [form, setForm] = useState({\n    userID: \"\",\n    password: \"\"\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Checks if the user is logged in\n    async function getUser() {\n      const loggedIn = await fetch(\"http://localhost:4000/session_get\",\n      // Checks user session data\n      {\n        method: \"GET\",\n        credentials: \"include\"\n      });\n      if (loggedIn.ok) {\n        // if session data exists\n        const response = await fetch(\"http://localhost:4000/getUser\",\n        // Gets current user from session data\n        {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        let user = await response.json();\n        switch (user.role) {\n          case 'Administrator':\n            navigate(\"/admin\");\n            break;\n          case 'Customer':\n            navigate(\"/customer\");\n            break;\n          case 'Employee':\n            navigate(\"/employee\");\n            break;\n          default:\n            window.alert(\"Invalid role\");\n        }\n      }\n    }\n    getUser();\n    return;\n  }, []);\n\n  // function to update form state with new credentials\n  function updateForm(jsonObj) {\n    setForm(prevJsonObj => ({\n      ...prevJsonObj,\n      ...jsonObj\n    }));\n  }\n\n  // function to handle form submission\n  async function onSubmit(e) {\n    e.preventDefault(); // prevent default submissions\n    const loginInfo = {\n      userID: form.userID,\n      password: form.password\n    };\n    try {\n      // Send login info to server for authentication\n      const response = await fetch(`http://localhost:4000/userLogin`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(loginInfo)\n      });\n      if (response.ok) {\n        const user = await response.json();\n        await fetch(`http://localhost:4000/session_set/${user.id}`, {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        // Routes based on user's roles\n        switch (user.role) {\n          case 'Administrator':\n            navigate(\"/admin\");\n            break;\n          case 'Customer':\n            navigate(\"/customer\");\n            break;\n          case 'Employee':\n            navigate(\"/employee\");\n            break;\n          default:\n            window.alert(\"Invalid role\");\n        }\n      } else {\n        window.alert(\"The username and/or password was not correct\");\n      }\n    } catch (error) {\n      window.alert(\"The username and/or password was not correct\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"login-title\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"login-label\",\n          children: \"User ID: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"userName\",\n          className: \"login-input\",\n          value: form.userID,\n          onChange: e => updateForm({\n            userID: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"login-label\",\n          children: \"Password: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          className: \"login-input\",\n          value: form.password,\n          onChange: e => updateForm({\n            password: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          className: \"login-submit\",\n          value: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"W8DoOQDOnip7y+PmkOBNDdeczUc=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","Login","_s","form","setForm","userID","password","navigate","getUser","loggedIn","fetch","method","credentials","ok","response","user","json","role","window","alert","updateForm","jsonObj","prevJsonObj","onSubmit","e","preventDefault","loginInfo","headers","body","JSON","stringify","id","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/daanish/Documents/GitHub/BankingApp/frontend/src/components/login.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport \"./login.css\";\n\n//Define Login \nexport default function Login() {\n    // Manage Username and Password\n  const [form, setForm] = useState({ userID: \"\", password: \"\" });\n\n  const navigate = useNavigate();\n  \n\n  useEffect(() => {\n    // Checks if the user is logged in\n    async function getUser() {\n        const loggedIn = await fetch(\"http://localhost:4000/session_get\", // Checks user session data\n            {\n                method: \"GET\",\n                credentials: \"include\"\n            }\n        );\n        if(loggedIn.ok){ // if session data exists\n            const response = await fetch(\"http://localhost:4000/getUser\", // Gets current user from session data\n              {\n                  method: \"GET\",\n                  credentials: \"include\"\n              }\n          );\n          let user = await response.json(); \n          switch (user.role) {\n            case 'Administrator': \n              navigate(\"/admin\");\n              break;\n            case 'Customer':\n              navigate(\"/customer\");\n              break;\n            case 'Employee':\n              navigate(\"/employee\");\n              break;\n            default:\n              window.alert(\"Invalid role\");\n          }\n\n        }\n    }\n    getUser();\n    \n    return;\n},[]); \n\n\n // function to update form state with new credentials\n  function updateForm(jsonObj) {\n    setForm(prevJsonObj => ({ ...prevJsonObj, ...jsonObj }));\n  }\n\n // function to handle form submission\n  async function onSubmit(e) {\n    e.preventDefault(); // prevent default submissions\n    const loginInfo = { userID: form.userID, password: form.password };\n \n    try {\n        // Send login info to server for authentication\n      const response = await fetch(`http://localhost:4000/userLogin`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(loginInfo),\n      });\n      \n      if (response.ok) {\n        const user = await response.json();\n        \n        await fetch(`http://localhost:4000/session_set/${user.id}`,\n          {\n              method: \"GET\",\n              credentials: \"include\"  \n          }\n      )\n        // Routes based on user's roles\n        switch (user.role) {\n          case 'Administrator': \n            navigate(\"/admin\");\n            break;\n          case 'Customer':\n            navigate(\"/customer\");\n            break;\n          case 'Employee':\n            navigate(\"/employee\");\n            break;\n          default:\n            window.alert(\"Invalid role\");\n        }\n      } else {\n        window.alert(\"The username and/or password was not correct\");\n      }\n    } catch (error) {\n      window.alert(\"The username and/or password was not correct\");\n    }\n  }\n \n  return (\n\n    <div className=\"login-container\">\n    <h3 className=\"login-title\">Login</h3>\n    <form onSubmit={onSubmit}>\n    <div>\n    <label className=\"login-label\">User ID: </label>\n    <input\n                type=\"text\"\n                id=\"userName\"\n                className=\"login-input\"\n                value={form.userID}\n                onChange={(e) => updateForm({ userID: e.target.value })}\n            />\n    </div>\n    <div>\n    <label className=\"login-label\">Password: </label>\n    <input\n                type=\"password\"\n                id=\"password\"\n                className=\"login-input\"\n                value={form.password}\n                onChange={(e) => updateForm({ password: e.target.value })}\n            />\n    </div>\n    <br />\n    <div>\n    <input\n                type=\"submit\"\n                className=\"login-submit\"\n                value=\"Login\"\n            />\n    </div>\n    </form>\n    </div>\n    );\n    }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}